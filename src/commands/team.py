from sqlalchemy.orm import Session
from telebot import TeleBot
from telebot.types import Message

from checks import check_admin
from models import Team


def register_team_setting_commands(bot: TeleBot, session: Session):
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    @bot.message_handler(commands=['createteam'])
    def create_team(message: Message):
        if not check_admin(bot, message, session):
            return
        msg = bot.reply_to(message, 'üëÄ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:')
        bot.register_next_step_handler(msg, process_team_name)

    def process_team_name(message: Message):
        team = Team(team_name=message.text)
        msg = bot.reply_to(message, 'üôè–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (–∏–ª–∏ /skip)')
        bot.register_next_step_handler(msg, process_team_description, team)

    def process_team_description(message: Message, team: Team):
        if not message.text.startswith('/skip'):
            team.description = message.text
        msg = bot.reply_to(message, 'üëã –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã (–∏–ª–∏ /skip):')
        bot.register_next_step_handler(msg, process_team_welcome, team)

    def process_team_welcome(message: Message, team: Team):
        if not message.text.startswith('/skip'):
            team.welcome_message = message.text
        msg = bot.reply_to(message, 'üëã –í–≤–µ–¥–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã (–∏–ª–∏ /skip):')
        bot.register_next_step_handler(msg, process_team_final, team)

    def process_team_final(message: Message, team: Team):
        if not message.text.startswith('/skip'):
            team.final_message = message.text
        msg = bot.reply_to(message, 'üè∑ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã:')
        bot.register_next_step_handler(msg, process_team_code, team)

    def process_team_code(message: Message, team: Team):
        team.code_word = message.text
        session.add(team)
        session.commit()
        bot.reply_to(message, f'‚úÖ –ö–æ–º–∞–Ω–¥–∞ \"{team.team_name}\" —Å–æ–∑–¥–∞–Ω–∞! ID: {team.id}')

    @bot.message_handler(commands=['listteam'])
    def list_team(message: Message):
        if not check_admin(bot, message, session):
            return
        teams = session.query(Team).all()
        if len(teams) == 0:
            bot.reply_to(message, '–í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /createteam ü•∫')
        else:
            msg = "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"

            for team in teams:
                current_task = (team.current_chain_order + 1) if list(
                    filter(lambda x: x.order == team.current_chain_order,
                           team.chains)) else '–í—Å–µ –∑–∞–¥–∞–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω—ã'
                msg += \
                    f'''
*–ö–æ–º–∞–Ω–¥–∞ #{team.id}*
üëÄ–ù–∞–∑–≤–∞–Ω–∏–µ: {team.team_name}
üôè–û–ø–∏—Å–∞–Ω–∏–µ: {team.description or "–ù–µ—Ç"}
üëã–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {team.welcome_message or "–ù–µ—Ç"}
üëã–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {team.final_message or "–ù–µ—Ç"}
üìù–¢–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è: {current_task}
üè∑–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ: {team.code_word}
\n
'''
            bot.reply_to(message, msg)
