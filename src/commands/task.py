from sqlalchemy.orm import Session
from telebot import TeleBot
from telebot.types import Message

from checks import check_admin
from models import Task


def register_task_setting_commands(bot: TeleBot, session: Session):
    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (–∞–¥–º–∏–Ω)
    @bot.message_handler(commands=['createtask'])
    def create_task(message: Message):
        if not check_admin(bot, message, session):
            return
        msg = bot.reply_to(message, 'üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:')
        bot.register_next_step_handler(msg, process_task_name)

    def process_task_name(message: Message):
        task = Task(task_name=message.text)
        msg = bot.reply_to(message, 'üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:')
        bot.register_next_step_handler(msg, process_task_description, task)

    def process_task_description(message: Message, task: Task):
        task.description = message.text
        msg = bot.reply_to(message, 'üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, GIF –∏–ª–∏ —Å—Ç–∏–∫–µ—Ä (–∏–ª–∏ /skip):')
        bot.register_next_step_handler(msg, process_task_media, task)

    def process_task_media(message: Message, task: Task):
        if message.photo:
            task.photo = message.photo[-1].file_id
        elif message.sticker:
            task.sticker = message.sticker.file_id
        elif message.animation:
            task.animation = message.animation.file_id

        msg = bot.reply_to(message, 'üè† –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:')
        bot.register_next_step_handler(msg, process_task_location, task)

    def process_task_location(message: Message, task: Task):

        task.location = message.text

        msg = bot.reply_to(message, 'üîë –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è:')
        bot.register_next_step_handler(msg, process_task_code, task)

    def process_task_code(message: Message, task: Task):
        task.code_word = message.text

        session.add(task)
        session.commit()
        bot.reply_to(message, '‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!')

    @bot.message_handler(commands=['listtask'])
    def list_task(message: Message):
        if not check_admin(bot, message, session):
            return
        tasks = session.query(Task).all()
        if len(tasks) == 0:
            bot.reply_to(message, '–í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –∑–∞–¥–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /createtask ü•∫')
        else:
            msg = "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π:\n"
            for task in tasks:
                msg += \
                    f'''
*–ó–∞–¥–∞–Ω–∏–µ #{task.id}:* {task.task_name}
üñº–û–ø–∏—Å–∞–Ω–∏–µ: {task.description}
üì∏–§–æ—Ç–æ: {'–ï—Å—Ç—å' if task.photo else '–ù–µ—Ç'}
ü´°–°—Ç–∏–∫–µ—Ä: {'–ï—Å—Ç—å' if task.sticker else '–ù–µ—Ç'}
üéÅ–ì–∏—Ñ–∫–∞: {'–ï—Å—Ç—å' if task.animation else '–ù–µ—Ç'}
üè†–õ–æ–∫–∞—Ü–∏—è: {task.location}
üîë–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ: {task.code_word}
\n'''
                if len(task.chains) > 0:
                    msg += '–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–æ –∫–æ–º–∞–Ω–¥–∞–º:\n'
                    for chain in task.chains:
                        msg += f'*–ö–æ–º–∞–Ω–¥–∞ "{chain.team.team_name}"*\n'
                        msg += f'–ó–∞–¥–∞–Ω–∏–µ #{chain.order + 1}\n'
            bot.reply_to(message, msg)
